name: Release

on:
  push:
    tags: ['v*']

permissions:
  contents: write
  id-token: write

jobs:
  release:
    name: Release and Publish
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v5
        with:
          node-version: '20.x'
          cache: 'npm'
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: npm ci

      - name: Validate package
        run: |
          echo "🔍 Validating package configuration..."
          npm run lint
          npm run test:coverage
          npm run build

      - name: Verify version tag
        id: verify_tag
        run: |
          TAG_VERSION=${GITHUB_REF#refs/tags/v}
          PACKAGE_VERSION=$(node -p "require('./package.json').version")
          echo "Tag version: $TAG_VERSION"
          echo "Package version: $PACKAGE_VERSION"
          
          if [ "$TAG_VERSION" != "$PACKAGE_VERSION" ]; then
            echo "❌ Version mismatch: tag v$TAG_VERSION != package v$PACKAGE_VERSION"
            exit 1
          fi
          
          echo "✅ Version verification passed"
          echo "version=$TAG_VERSION" >> $GITHUB_OUTPUT

      - name: Extract release notes
        id: extract_notes
        run: |
          # Extract release notes from CHANGELOG.md for this version
          VERSION="${{ steps.verify_tag.outputs.version }}"
          
          # Create release notes from changelog
          if [ -f "CHANGELOG.md" ]; then
            # Extract content between current version and next version/end of file
            sed -n "/## \[v\?$VERSION\]/,/## \[v\?/p" CHANGELOG.md | head -n -1 > release_notes.md
            # Remove the version header line
            tail -n +2 release_notes.md > temp_notes.md && mv temp_notes.md release_notes.md
            
            # If no specific notes found, create generic ones
            if [ ! -s release_notes.md ]; then
              echo "Release v$VERSION" > release_notes.md
              echo "" >> release_notes.md
              echo "See the full changelog for details." >> release_notes.md
            fi
          else
            echo "Release v$VERSION" > release_notes.md
          fi
          
          echo "Release notes created:"
          cat release_notes.md

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref }}
          name: "v${{ steps.verify_tag.outputs.version }}"
          body_path: release_notes.md
          draft: false
          prerelease: false
          files: |
            dist/**/*
            package.json
            README.md
            LICENSE
            CHANGELOG.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish to NPM
        run: |
          echo "📦 Publishing to NPM..."
          
          # Verify we can publish
          npm publish --dry-run
          
          # Publish with provenance
          npm publish --provenance --access public
          
          echo "✅ Successfully published to NPM"
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Post-release validation
        run: |
          echo "🔍 Validating published package..."

          # Wait a moment for NPM to propagate
          sleep 30

          # Verify the package can be installed
          npm info pgit-cli@${{ steps.verify_tag.outputs.version }}

          echo "✅ Package successfully published and available on NPM"

      - name: Notify success
        run: |
          echo "🎉 Release v${{ steps.verify_tag.outputs.version }} completed successfully!"
          echo ""
          echo "📦 Package: https://www.npmjs.com/package/pgit-cli"
          echo "📋 Release: https://github.com/${{ github.repository }}/releases/tag/v${{ steps.verify_tag.outputs.version }}"
          echo ""
          echo "Install with: npm install -g pgit-cli@${{ steps.verify_tag.outputs.version }}"