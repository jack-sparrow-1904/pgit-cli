name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    name: Test on ${{ matrix.os }} with Node ${{ matrix.node-version }}
    runs-on: ${{ matrix.os }}
    
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        node-version: ['20.x', '22.x']

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Check code formatting
        run: npm run format:check

      - name: Lint code
        run: npm run lint

      - name: Type check
        run: npx tsc --noEmit

      - name: Build project
        run: npm run build

      - name: Run tests
        run: npm run test:ci
        env:
          CI: true

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        if: matrix.os == 'ubuntu-latest' && matrix.node-version == '20.x'
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

      - name: Test CLI installation and basic functionality
        run: |
          npm pack
          ls -la *.tgz
          PACKED_FILE=$(ls pgit-cli-*.tgz)
          echo "Installing $PACKED_FILE"
          npm install -g "$PACKED_FILE"
          pgit --version
          pgit --help
        shell: bash

      - name: Test symbolic link functionality (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          mkdir -p test-repo
          cd test-repo
          git init
          echo "test content" > test.txt
          pgit init
          pgit add test.txt
          # Verify symbolic link was created
          test -L test.txt
          # Verify original content is accessible
          grep "test content" test.txt
        shell: bash

      - name: Test symbolic link functionality (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          mkdir test-repo
          cd test-repo
          git init
          echo "test content" > test.txt
          pgit init
          pgit add test.txt
          # Verify file exists and content is accessible
          # TODO: Improve this test to check for symbolic link attributes
          type test.txt | findstr "test content"
        shell: cmd

      - name: Store build artifacts
        uses: actions/upload-artifact@v4
        if: matrix.os == 'ubuntu-latest' && matrix.node-version == '20.x'
        with:
          name: dist-${{ github.sha }}
          path: |
            dist/
            package.json
            README.md
          retention-days: 30

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: npm audit --audit-level=moderate

      - name: Run CodeQL Analysis
        uses: github/codeql-action/init@v2
        with:
          languages: javascript

      - name: Autobuild
        uses: github/codeql-action/autobuild@v2

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2

  quality:
    name: Quality Gate
    runs-on: ubuntu-latest
    needs: [test, security]
    
    steps:
      - name: Quality Gate - Test Results
        run: echo "All tests passed across platforms and Node.js versions"
        
      - name: Quality Gate - Security
        run: echo "Security scans completed successfully"

      - name: Quality Gate Summary
        run: |
          echo "✅ Cross-platform compatibility verified"
          echo "✅ Node.js version matrix testing completed"
          echo "✅ Security scans passed" 
          echo "✅ Code quality checks passed"
          echo "✅ Build artifacts generated"